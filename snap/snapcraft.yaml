name: tide-ide
version: 2.2.0
grade: stable
confinement: classic
base: core24
summary: The modern approach to WebAssembly development & more
description: |
  Develop and build WebAssembly code directly on your favorite tablet device!
  Welcome to Tide, the touch-friendly IDE for WebAssembly development.

  Common Features:
  - On-device compilation & execution of WebAssembly
  - Supports C, C++23 & Python 3.11
  - Import projects from third-party software like Working Copy
  - Project-wide Find & Replace
  - Syntax highlighting

  For C/C++:
  - Debugging with breakpoints & single-stepping, call stack and stack frame information
  - Format your code based on popular styling
  - Autocomplete your variables & functions/methods
  - Project management (using a subset of QMake)
  - Optional WASI threading and socket support
  - Easily release your WebAssembly builds

  Special to Linux:
  - Ability to build Linux Snap packages when `snapcraft` is also installed

  Copyright notices:
  - LLVM: Apache 2.0 License with LLVM exceptions
  - WAMR: Apache 2.0
  - Wasi SDK: Apache 2.0
  - libqmakeparser: BSD 3-Clause License
  - no_system: BSD 3-Clause License
  - Tide icon: Parmjot Singh

platforms:
  arm64:
    build-on: [ arm64 ]
  amd64:
    build-on: [ amd64 ]

apps:
  tide-ide:
    command-chain: [ bin/desktop-launch ]
    command: usr/bin/tide-ide

parts:
  bootstrap:
    plugin: cmake
    source: 3rdparty
    build-attributes:
      - enable-patchelf
    build-packages:
      - cmake
      - ccache
      - ninja-build
      - build-essential
      - dpkg-dev
      - libssl-dev
      - libcrypt-dev
      - curl
      - clang
      - libicu-dev
    stage-packages:
      - libpcre2-16-0
    override-build: |
      cd $CRAFT_PART_SRC
      bash -x bootstrap.sh --linux-snap
  deps:
    plugin: nil
    build-attributes:
      - no-patchelf
    stage-packages:
      - libpcre2-16-0
      - libpcre3
      - libssl3
      - openssl
      - fonts-open-sans
      - fonts-ubuntu
      - libgl1-mesa-dri
      - libedit2
      - libegl1
      - libffi8
      - libglib2.0-0
      - zlib1g
      - shared-mime-info
    stage:
      - usr/lib
    prime:
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
    after: [ bootstrap ]
  qt6:
    plugin: cmake
    source: https://github.com/qt/qtbase.git
    source-branch: 6.7.0
    cmake-parameters:
      - -GNinja
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_INSTALL_RPATH=\$ORIGIN/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/snap/core24/current/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
      - -DQT_FEATURE_opengl=ON
      - -DQT_FEATURE_opengles2=ON
      - -DQT_FEATURE_opengles3=ON
      - -DQT_FEATURE_opengles31=ON
      - -DQT_FEATURE_opengles32=ON
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libinput-dev
      - libgl-dev
      - libgles-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libx11-dev
      - libx11-xcb-dev
      - libxext-dev
      - libxfixes-dev
      - libxi-dev
      - libxrender-dev
      - libxcb1-dev
      - libxcb-glx0-dev
      - libxcb-keysyms1-dev
      - libxcb-image0-dev
      - libxcb-shm0-dev
      - libxcb-icccm4-dev
      - libxcb-sync-dev
      - libxcb-xfixes0-dev
      - libxcb-shape0-dev
      - libxcb-randr0-dev
      - libxcb-render-util0-dev
      - libxcb-util-dev
      - libxcb-xinerama0-dev
      - libxcb-xkb-dev
      - libxkbcommon-dev
      - libxkbcommon-x11-dev
    stage-packages:
      - libxkbcommon0
      - dmz-cursor-theme
      - light-themes
      - adwaita-icon-theme
      - shared-mime-info
      - libgdk-pixbuf2.0-0
      - libfreetype6
      - libfontconfig1
    stage:
      - usr/*
  qt6shadertools:
    plugin: cmake
    source: https://github.com/qt/qtshadertools.git
    source-branch: 6.7.0
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_INSTALL_RPATH=\$ORIGIN/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/snap/core24/current/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
    after: [ qt6 ]
  qt6declarative:
    plugin: cmake
    source: https://github.com/qt/qtdeclarative.git
    source-branch: 6.7.0
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_INSTALL_RPATH=\$ORIGIN/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/snap/core24/current/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib:$CRAFT_STAGE/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$CRAFT_STAGE/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libharfbuzz-dev
    stage-packages:
      - libharfbuzz0b
    stage:
      - usr/*
    after: [ qt6shadertools ]
  qt6wayland:
    plugin: cmake
    source: https://github.com/qt/qtwayland.git
    source-branch: 6.7.0
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_PREFIX_PATH=${CRAFT_STAGE}/usr/lib/cmake/Qt6
      - -DCMAKE_INSTALL_RPATH=\$ORIGIN/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/snap/core24/current/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib:$CRAFT_STAGE/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$CRAFT_STAGE/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libxkbcommon-dev
      - libwayland-dev
    stage-packages:
      - libwayland-client0
      - libwayland-cursor0
      - libwayland-egl1
    after: [ qt6declarative ]
  qt6svg:
    plugin: cmake
    source: https://github.com/qt/qtsvg.git
    source-branch: 6.7.0
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_INSTALL_RPATH=\$ORIGIN/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/snap/core24/current/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib:$CRAFT_STAGE/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$CRAFT_STAGE/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
    after: [ qt6wayland ]
  qt6virtualkeyboard:
    plugin: cmake
    source: https://github.com/qt/qtvirtualkeyboard.git
    source-branch: 6.7.0
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_INSTALL_RPATH=\$ORIGIN/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/snap/core24/current/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib:$CRAFT_STAGE/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$CRAFT_STAGE/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
    after: [ qt6svg ]
  tide:
    plugin: cmake
    source: .
    build-attributes:
      - enable-patchelf
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib:$CRAFT_STAGE/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$CRAFT_STAGE/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    cmake-parameters:
      - -DCMAKE_C_COMPILER=clang
      - -DCMAKE_CXX_COMPILER=clang++
      - -DCMAKE_PREFIX_PATH=${CRAFT_STAGE}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/cmake/Qt6
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DSNAP=1
      - -DSNAP_STAGE=$CRAFT_STAGE
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libssl-dev
      - libcrypt-dev
      - curl
      - clang
      - libgl-dev
      - libgles-dev
      - libpcre2-16-0
      - libudev-dev
      - zlib1g-dev
    after: [ bootstrap, qt6virtualkeyboard ]
  launcher:
    plugin: dump
    source: snap/local
    organize:
      desktop-launch: bin/desktop-launch
  cmake:
    plugin: cmake
    source: 3rdparty/CMake
    build-attributes:
      - enable-patchelf
    override-build: |
      mkdir $CRAFT_PART_BUILD || true
      cd $CRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_C_FLAGS="-fPIC" -DCMAKE_CXX_FLAGS="-fPIC" $CRAFT_PART_SRC
      export LD_LIBRARY_PATH=${CRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$CRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $CRAFT_PART_BUILD
      DESTDIR=$CRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
  ninja:
    plugin: cmake
    source: 3rdparty/ninja
    build-attributes:
      - enable-patchelf
    override-build: |
      mkdir $CRAFT_PART_BUILD || true
      cd $CRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr $CRAFT_PART_SRC
      export LD_LIBRARY_PATH=${CRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$CRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $CRAFT_PART_BUILD
      DESTDIR=$CRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
  # Special to Snapcraft release: Homebrew PSP
  #pspsdk:
  #  plugin: autotools
  #  after: [ tide ]
  #  source: https://github.com/pspdev/pspsdk.git
  #  build-attributes:
  #    - enable-patchelf
  #  build-packages:
  #    - build-essential
  #    - dpkg-dev
  #  override-build: |
  #    mkdir $CRAFT_PART_BUILD || true
  #    cd $CRAFT_PART_BUILD
  #    export LD_LIBRARY_PATH=${CRAFT_STAGE}/usr/lib
  #    ./bootstrap
  #    craftctl default
  maliit:
    after: [ qt6declarative ]
    plugin: cmake
    source: https://github.com/fredldotme/maliit-framework.git
    source-branch: tide
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_PREFIX_PATH=${CRAFT_STAGE}/usr/lib/cmake/Qt6
      - -Denable-wayland=OFF
      - -Denable-glib=OFF
      - -Denable-tests=OFF
      - -Denable-docs=OFF
      - -Denable-xcb=OFF
      - -Denable-qt-inputcontext=ON
      - -Dwith-qt6=ON
  cleanup:
    after: [ maliit, ninja, cmake, launcher, tide, deps ]
    plugin: nil
    override-prime: |
      set -eux

      # GL
      rm -f $CRAFT_PRIME/usr/lib/${CRAFT_ARCH_TRIPLET}/lib*GL*.so*
      rm -f $CRAFT_PRIME/usr/lib/${CRAFT_ARCH_TRIPLET}/libdrm*.so*
      rm -f $CRAFT_PRIME/usr/lib/${CRAFT_ARCH_TRIPLET}/libgbm*.so*

      # Clang
      rm -f $CRAFT_PRIME/usr/lib/${CRAFT_ARCH_TRIPLET}/libclang.so
      rm -f $CRAFT_PRIME/usr/lib/${CRAFT_ARCH_TRIPLET}/libclang.so.18.1

      # Static libraries not used
      rm -f $CRAFT_PRIME/usr/lib/*.a

      rm -fr "$CRAFT_PRIME/usr/lib/${CRAFT_ARCH_TRIPLET}/dri"
      for CRUFT in bug drirc.d glvnd libdrm lintian man; do
          rm -rf "$CRAFT_PRIME/usr/share/$CRUFT"
      done
  interpreter:
    after: [ cleanup ]
    plugin: nil
    build-packages:
      - patchelf
      - coreutils
    override-prime: |
      set -eux
      LD=""
      if [ "$CRAFT_ARCH_BUILD_FOR" = "amd64" ]; then
        LD="ld-linux-x86-64.so.2"
      elif [ "$CRAFT_ARCH_BUILD_FOR" = "armhf" ]; then
        LD="ld-linux-armhf.so.3"
      elif [ "$CRAFT_ARCH_BUILD_FOR" = "arm64" ]; then
        LD="ld-linux-aarch64.so.1"
      elif [ "$CRAFT_ARCH_BUILD_FOR" = "ppc64el" ]; then
        LD="ld64.so.2"
      else
        echo "Unknown architecture: $CRAFT_ARCH_BUILD_FOR"
        exit 1
      fi
      #cd $CRAFT_PRIME/usr/qml
      #for f in $(find . -name "lib*.so"); do
      #  patchelf --set-interpreter "/snap/core24/current/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/$LD" "$f" || true
      #done
      #cd $CRAFT_PRIME/usr/plugins
      #for f in $(find . -name "lib*.so"); do
      #  patchelf --set-interpreter "/snap/core24/current/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/$LD" "$f" || true
      #done
      cd $CRAFT_PRIME/usr/lib
      for f in $(find . -name "libQt*.so.6.7.0"); do
        set +e
        patchelf --set-interpreter "/snap/core24/current/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/$LD" "$f"
        set -e
      done
      patchelf --set-interpreter "/snap/core24/current/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/$LD" "$CRAFT_ARCH_TRIPLET_BUILD_FOR/qt6/plugins/platforminputcontexts/libmaliitplatforminputcontextplugin.so" || true
      exit 0
