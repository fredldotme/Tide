name: tide-ide
version: 1.9.0
grade: stable
confinement: classic
base: core22
summary: The modern approach to WebAssembly development
description: |
  Develop and build WebAssembly code directly on your favorite tablet device!
  Welcome to Tide, the touch-friendly IDE for WebAssembly development.

  Common Features:
  - On-device compilation & execution of WebAssembly
  - Supports C, C++23 & Python 3.11
  - Import projects from third-party software like Working Copy
  - Project-wide Find & Replace
  - Syntax highlighting

  For C/C++:
  - Debugging with breakpoints & single-stepping, call stack and stack frame information
  - Format your code based on popular styling
  - Autocomplete your variables & functions/methods
  - Project management (using a subset of QMake)
  - Optional WASI threading and socket support
  - Easily release your WebAssembly builds

  Copyright notices
  - LLVM: Apache 2.0 License with LLVM exceptions
  - WAMR: Apache 2.0
  - Wasi SDK: Apache 2.0
  - libqmakeparser: BSD 3-Clause License
  - no_system: BSD 3-Clause License
  - Tide icon: Parmjot Singh

architectures:
  - build-on: [amd64]
    build-for: [amd64]
  - build-on: [arm64]
    build-for: [arm64]

apps:
  tide-ide:
    environment:
      LD_LIBRARY_PATH: ${SNAP}/lib:${SNAP}/usr/lib:${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
      QT_PLUGIN_PATH: ${SNAP}/usr/plugins
      QML_IMPORT_PATH: ${SNAP}/usr/qml
      QT_XKB_CONFIG_ROOT: ${SNAP}/usr/share/X11/xkb
    command-chain: [ bin/desktop-launch ]
    command: usr/bin/tide-ide
    plugs: [ x11, wayland, desktop, desktop-legacy, opengl, alsa, pulseaudio, home, removable-media, network, network-bind ]

parts:
  bootstrap:
    plugin: cmake
    source: 3rdparty
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libssl-dev
      - libcrypt-dev
      - curl
      - clang
      - libicu-dev
    stage-packages:
      - libpcre2-16-0
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      bash -x bootstrap.sh --linux-snap
  tide:
    plugin: cmake
    source: .
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DSNAP=1
      - -DSNAP_STAGE=$CRAFT_STAGE
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libssl-dev
      - libcrypt-dev
      - curl
      - clang
    stage-packages:
      - libpcre2-16-0
      - libpcre3
      - libssl3
      - openssl
      - fonts-open-sans
      - fonts-ubuntu
    after: [ qt6declarative, bootstrap ]
  qt6:
    plugin: cmake
    source: https://github.com/qt/qtbase.git
    source-branch: 6.6.0
    cmake-parameters:
      - -GNinja
      - -DCMAKE_INSTALL_PREFIX=/usr
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libinput-dev
      - libgl-dev
      - libgles-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libx11-dev
      - libx11-xcb-dev
      - libxext-dev
      - libxfixes-dev
      - libxi-dev
      - libxrender-dev
      - libxcb1-dev
      - libxcb-glx0-dev
      - libxcb-keysyms1-dev
      - libxcb-image0-dev
      - libxcb-shm0-dev
      - libxcb-icccm4-dev
      - libxcb-sync-dev
      - libxcb-xfixes0-dev
      - libxcb-shape0-dev
      - libxcb-randr0-dev
      - libxcb-render-util0-dev
      - libxcb-util-dev
      - libxcb-xinerama0-dev
      - libxcb-xkb-dev
      - libxkbcommon-dev
      - libxkbcommon-x11-dev
    stage-packages:
      - libxkbcommon0
      - dmz-cursor-theme
      - light-themes
      - adwaita-icon-theme
      - gnome-themes-standard
      - shared-mime-info
      - libgdk-pixbuf2.0-0
    stage:
      - usr/*
  qt6shadertools:
    plugin: cmake
    source: https://github.com/qt/qtshadertools.git
    source-branch: 6.6.0
    override-build: |
      mkdir $SNAPCRAFT_PART_BUILD || true
      cd $SNAPCRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr $SNAPCRAFT_PART_SRC
      export LD_LIBRARY_PATH=${SNAPCRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$SNAPCRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $SNAPCRAFT_PART_BUILD
      DESTDIR=$SNAPCRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
    after: [ qt6 ]
  qt6declarative:
    plugin: cmake
    source: https://github.com/qt/qtdeclarative.git
    source-branch: 6.6.0
    override-build: |
      mkdir $SNAPCRAFT_PART_BUILD || true
      cd $SNAPCRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr $SNAPCRAFT_PART_SRC
      export LD_LIBRARY_PATH=${SNAPCRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$SNAPCRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $SNAPCRAFT_PART_BUILD
      DESTDIR=$SNAPCRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
      - libharfbuzz-dev
    stage-packages:
      - libharfbuzz0b
    stage:
      - usr/*
    after: [ qt6shadertools ]
  qt6wayland:
    plugin: cmake
    source: https://github.com/qt/qtwayland.git
    source-branch: 6.6.0
    override-build: |
      mkdir $SNAPCRAFT_PART_BUILD || true
      cd $SNAPCRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr $SNAPCRAFT_PART_SRC
      export LD_LIBRARY_PATH=${SNAPCRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$SNAPCRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $SNAPCRAFT_PART_BUILD
      DESTDIR=$SNAPCRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
    after: [ qt6declarative ]
  cmake:
    plugin: cmake
    source: 3rdparty/CMake
    override-build: |
      mkdir $SNAPCRAFT_PART_BUILD || true
      cd $SNAPCRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_C_FLAGS="-fPIC" -DCMAKE_CXX_FLAGS="-fPIC" $SNAPCRAFT_PART_SRC
      export LD_LIBRARY_PATH=${SNAPCRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$SNAPCRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $SNAPCRAFT_PART_BUILD
      DESTDIR=$SNAPCRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
  ninja:
    plugin: cmake
    source: 3rdparty/ninja
    override-build: |
      mkdir $SNAPCRAFT_PART_BUILD || true
      cd $SNAPCRAFT_PART_BUILD
      cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr $SNAPCRAFT_PART_SRC
      export LD_LIBRARY_PATH=${SNAPCRAFT_STAGE}/usr/lib
      ninja
      DESTDIR=$SNAPCRAFT_PART_INSTALL ninja install
    override-stage: |
      cd $SNAPCRAFT_PART_BUILD
      DESTDIR=$SNAPCRAFT_STAGE ninja install
    build-packages:
      - cmake
      - ninja-build
      - build-essential
      - dpkg-dev
    stage:
      - usr/*
  launcher:
    plugin: dump
    source: snap/local
    organize:
      'desktop-launch': bin/desktop-launch
    after: [ tide ]
